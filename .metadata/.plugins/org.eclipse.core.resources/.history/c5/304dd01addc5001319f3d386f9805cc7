package businessLogic;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map.Entry;

import com.example.pilltracker.R;

import database.medDatabase;
import entities.Medication;
import entities.MedicationImpl;

import android.content.Context;
import android.view.View;
import android.widget.EditText;

public class mDb implements MedicationFunctions {
	
	private static HashMap<String, Integer> idMap = new HashMap<String, Integer>();
	private static int idGenerator = 0;
	
	@Override
	public void userInputToDatabase(View v, Context c) {
		int id = mDb.idGenerator++;
		String name = ((EditText)v.findViewById(R.id.fepa_et1)).getText().toString();
		String phone = ((EditText)v.findViewById(R.id.fdea_et2)).getText().toString();
		String email = ((EditText)v.findViewById(R.id.fdea_et3)).getText().toString();
		String address = ((EditText)v.findViewById(R.id.fdea_et4)).getText().toString();
		idMap.put(name, id);
	}

	@Override
	public ArrayList<Medication> readFromDatabase(Context c) {
		ArrayList<Medication> results = new ArrayList<Medication>();
		medDatabase mDb = new medDatabase(c, null, null, 0);
		Integer[] allIds = idMap.values().toArray(new Integer[idMap.values().size()]);
		for (Integer i : allIds) {
			// [hour0, min0, day0, on0, hour1, min1, day1, on1, ...]
			ArrayList<Integer> resultList = mDb.readReminder(i);
			// [name, prescriber, comments]
			String[] medNames = mDb.readDetails(i);
			String name = medNames[0];
			String prescriber = medNames[1];
			String comments = medNames[2];
			int numReminders = resultList.size() / 4;
			int[] time_h = new int[numReminders];
			int[] time_m = new int[numReminders];
			int[] days = new int[numReminders];
			// only check db if reminders exist
			int on = (numReminders > 0) ? resultList.get(3) : 0;
			Medication m = new MedicationImpl(name, prescriber, comments, time_h, time_m, days, on, i);
			results.add(m);
		}
		return results;
	}

	@Override
	public int medNameToId(String name) {
		return idMap.get(name);
	}

	@Override
	public String idToMedName(int id) {
		for (Entry<String, Integer> entry : idMap.entrySet()) {
			if (id == entry.getValue()) {
				return entry.getKey();
			}
		}
		// could not find name
		return null;
	}

	@Override
	public String[] daysMeds(Context c, int day) {
		ArrayList<String> result = new ArrayList<String>();
		medDatabase mDb = new medDatabase(c, null, null, 0);
		Integer[] allIds = idMap.values().toArray(new Integer[idMap.values().size()]);
		for (Integer i : allIds) {
			// [hour0, min0, day0, on0, hour1, min1, day1, on1, ...]
			ArrayList<Integer> resultList = mDb.readReminder(i);
			for (int j = 0; j < resultList.size(); j += 4) {
				if (resultList.get(j+2) == day)
					result.add(this.idToMedName(i));
			}
		}
		return result.toArray(new String[result.size()]);
	}

	@Override
	public String[] allMeds(Context c) {
		ArrayList<String> results = new ArrayList<String>();
		medDatabase mDb = new medDatabase(c, null, null, 0);
		Integer[] allIds = idMap.values().toArray(new Integer[idMap.values().size()]);
		for (Integer id : allIds) {
			String[] medNames = mDb.readDetails(id);
			for (String s : medNames) {
				results.add(s);
			}
		}
		return results.toArray(new String[results.size()]);
	}

	@Override
	public int[] getTimes(Context c, int id) {
		medDatabase mDb = new medDatabase(c, null, null, 0);
		ArrayList<Integer> resultList = mDb.readReminder(id);
		int[] result = new int[resultList.size()];
		for (int i = 0; i < result.length; i++) {
			result[i] = resultList.get(i);
		}
		return result;
	}

}
